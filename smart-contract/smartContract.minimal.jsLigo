type id = string;

type p_inputs = {
  id: string,
  data: bytes
};

type storage = {
  users: big_map<id, bytes>,
  carbon: big_map<id, bytes>,
  products: big_map<id, bytes>
};

type action =
| ["Create_product", p_inputs]
| ["Create_user", p_inputs]
| ["Create_carbon", p_inputs]
| ["Get_details"];

let create_product = ([parameter, storage]: [p_inputs, storage]) : storage => {
    let id = parameter.id;
    let products = storage.products;
    let create_product_obj = parameter.data;
    let updated_products = Big_map.update(id, Some(create_product_obj), products);
      return  {
                users: storage.users,
                carbon : storage.carbon,
                products : updated_products,
              };
};
let create_user = ([parameter, storage]: [p_inputs, storage]) : storage => {
    let id = parameter.id;
    let users = storage.users;
    let create_obj = parameter.data;
    let updated_users = Big_map.update(id, Some(create_obj), users);
      return  {
                users: updated_users,
                carbon : storage.carbon,
                products : storage.products,
              };
};
let create_carbon = ([parameter, storage]: [p_inputs, storage]) : storage => {
    let id = parameter.id;
    let carbon = storage.carbon;
    let create_obj = parameter.data;
    let updated = Big_map.update(id, Some(create_obj), carbon);
      return  {
                users: storage.users,
                carbon : updated,
                products : storage.products,
              };
};
let get_details = (store :storage) : storage => store ;


let main = ([action, store  ]: [action, storage]) : [list<operation>, storage] => {
   return [(list([]) as list<operation>), match(action, {
                                                       Get_details : () => get_details(store),
                                                       Create_product: cd => create_product([cd, store]),
                                                       Create_user: cd => create_user([cd, store]),
                                                       Create_carbon: cd => create_carbon([cd, store]),
                                                       })
    ];
};  